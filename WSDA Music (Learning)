/*
Created by: Afifah
Create on: 1 Mar 2023
Description: Learning SQL from Linkedin | List of WSDA customers name and email address
*/

SELECT
 FirstName AS [Customer First Name],
 LastName AS 'Customer Last Name',
 Email AS EMAIL
FROM
 Customer
ORDER BY
 Email DESC
LIMIT 25

/*
How many customers purchased 2 songs at $0.99 each?
*/

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity
  total
FROM
 Invoice
 WHERE
  total = 1.98
 ORDER BY
  InvoiceDate
  
  /*
How many invoices exist between $1.98 and $5.00?
*/

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity
  total
FROM
 Invoice
 WHERE
  total BETWEEN 1.98 AND 5.00
 ORDER BY
  InvoiceDate
  
  
  /*
How many invoices do we have that are exactly $1.98 or 5.00?
*/

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity
  total
FROM
 Invoice
 WHERE
  total IN (1.98,3.96)
 ORDER BY
  InvoiceDate
  
  /*
How many invoices were billed to Brussels?
*/

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 BillingCity = 'Brussels'
 ORDER BY
  InvoiceDate
	
  
  /*
How many invoices were billed to Brussels, Orlando or Paris?
*/

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 BillingCity IN ('Brussels', 'Orlando', 'Paris')
 ORDER BY
  InvoiceDate
  
  /*
How many invoices were billed to cities that starts with B?
--% = I dont care what comes next

SELECT
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 BillingCity like 'B%'
 ORDER BY
  InvoiceDate
  
  /*
How many invoices were billed to cities that have B anywhere in its name?
*/

--% = I dont care what comes next/before

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 BillingCity like '%B%'
 ORDER BY
  InvoiceDate
  
  -- How many invoices were billed on 22 May 2010? 2010-05-22 00:00:00

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 date(InvoiceDate) = '2010-05-22'
 ORDER BY
  date(invoicedate)
  
  -- Get all invoices were billed after 2010-05-22 and have a total less than 3.00?

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 date(InvoiceDate) > '2010-05-22'AND total < 3.00
 ORDER BY
  InvoiceDate
  
  -- Get all invoices were billing starts with P or starts with D?

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 BillingCity like 'P%' OR BillingCity like 'D%'
 ORDER BY
  InvoiceDate
  
  -- Get all invoices that are greater than 1.98 from any cities whose name start with P or starts with D?

/* BEMDAS Brackets, Exponent, Multiplication, Division, Addition, Subtraction
*/

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total
FROM
 Invoice
 WHERE
 total > 1.98 AND (BillingCity like 'P%' OR BillingCity like 'D%')
 ORDER BY
  InvoiceDate
  
  -- WSDA wants as many customers as possible to spend between $7.00 and $15.00

/* Sales Categories
Baseline purchase  - Between $.99 and $1.99
Low purchase  - Between $2.00 and $6.99
Target purchase  - Between $7.00 and $15.00
Top performer  - Above $15.00
*/

SELECT 
  InvoiceDate,
  BillingAddress,
  BillingCity,
  total,
  CASE
  WHEN TOTAL < 2.00 THEN 'Baseline Purchase'
  WHEN total BETWEEN 2.00 AND 6.99 THEN 'Low Purchase'
  WHEN total BETWEEN 7.00 AND 15.00 THEN 'Target Purchase'
  ELSE 'Top Performer'
 END AS PurchaseType 
  FROM
 Invoice 
ORDER BY
  total DESC
  
  -- Joining 2 tables into 1 (INNER JOIN)


SELECT
 c.LastName,
 c.FirstName,
 i.InvoiceId,
 i.CustomerId,
 i.InvoiceDate,
 i.total
FROM
 Invoice AS i
INNER JOIN 
 Customer AS c
ON 
 i.CustomerId = c.CustomerId
ORDER by 
 c.CustomerId
 
 -- Joining more than 2 tables into 1 (LEFT JOIN)

-- WSDA Music wants to reward employee who achieved 10 highest individual sales

SELECT
 e.FirstName,
 e.LastName,
 e.EmployeeId,
 c.FirstName,
 c.LastName,
 c.SupportRepId,
 i.CustomerId,
 i.total
FROM 
 Invoice AS i
INNER JOIN
 Customer AS c
ON
 i.CustomerId = c.CustomerId
INNER JOIN
 Employee AS e
ON
 c.SupportRepId = e.EmployeeId
ORDER by
 total DESC
LIMIT 10

/*
Create a mailing list of US customers. (STRING FUNCTIONS!)
*/

SELECT
 FirstName,
 LastName,
 Address,
 FirstName|| ' ' ||LastName || ' ' || Address || ',' || City || ' ' || State || ' ' || PostalCode AS [Mailing Address],
 length(PostalCode),
 substr(postalcode,1,5) AS [5 Digit postal code],
 upper(firstname) AS [First name ALL Caps],
 lower(lastname) AS [Last Name ALL Lower Caps]
FROM
 Customer
WHERE
 Country = 'USA'
 
 /*

Created by: Afifah
Date: 1 Mar 2023
Description: Calculate the ages of all employees
*/

-- strftime is to reformat how the date you want it to look like

SELECT
 LastName,
 FirstName,
 BirthDate,
 strftime('%Y-%m-%d', Birthdate) AS [Birthdate No Timecode],
 strftime('%Y-%m-%d','now') - strftime('%Y-%m-%d', Birthdate) AS Age
 FROM
 Employee

--Nesting function onto average function. (round)

SELECT
 sum(Total) AS [Sales],
 round( AVG(TOTAL),2) AS [Average Sales],
 max(TOTAL) AS [Maximum Sales],
 min(total) AS [Minimum Sales],
 count(*) AS [Sales Count]
FROM
 Invoice

/* 
Grouping in SQL | What are the average invoice totals by City.
*/

-- Apply GROUP BY function to a nonaggregated-RULE OF THUMB!
-- Apply HAVING function to aggregated VALUES
-- Apply WHERE function to non aggregated VALUES.

SELECT
 BillingCity,
 round(avg(total),2) AS 'Average sales'
FROM
 Invoice
WHERE
 BillingCity like 'L%' OR BillingCity like 'P%'
GROUP BY
 BillingCity
HAVING
 avg(total) > 1
ORDER BY
 BillingCity
 
 /* 
Grouping in more than 1 field | What are the average invoice totals by billing country and City.
*/

SELECT 
 BillingCountry,
 BillingCity,
 round (avg(total),2) AS 'Average Sales'
FROM
 Invoice
GROUP by
 BillingCountry, BillingCity
ORDER by
 BillingCountry, avg(total) DESC
 
 /* 
 Subqueries | Gather data about all invoices that are less than this average. (avg = 8.06)
*/
SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	Invoice
WHERE
	total <
(SELECT
 round(avg(total),2) AS 'Average Sales'
FROM
 Invoice)
ORDER BY
	total DESC
 
 /* 
 Subqueries in SELECT | Compare city average sales to global average sales.
*/

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	round(AVG(TOTAL),2) AS [City Average Sales],
	(SELECT round(avg(total),2) FROM Invoice) AS 'Global Average Sales'
FROM
	Invoice
GROUP BY
	BillingCity
ORDER BY
	BillingCity DESC
  
/* 
Subqueries without aggregate function(1 Sep 2012)
*/

SELECT
	InvoiceDate,
	BillingCity,
	total
FROM
	Invoice
WHERE
InvoiceDate >
(SELECT
	InvoiceDate
FROM
	Invoice
WHERE
 InvoiceId = 251)
ORDER by
	InvoiceDate
  
/* 
Returning multiple values from a subquery (IN function)
*/

--IN Function is used to find result that can return specific multiple VALUES
--IN function in subqueries enable user to find invoices with the specific resulted dates

SELECT
	InvoiceDate,
	BillingAddress,
	BillingCity,
	total
FROM
	Invoice
WHERE
	InvoiceDate IN
(SELECT InvoiceDate FROM Invoice WHERE InvoiceId IN (251,252,254))

/* 
Subqueries and DISTINCT | Which track is not selling?
*/

SELECT
	TrackId,
	Composer,
	Name
FROM
	Track
WHERE 
 TrackId NOT in
(SELECT DISTINCT TrackId  FROM InvoiceLine ORDER BY TrackId)

/* 
CREATE VIEW
*/


CREATE VIEW V_AverageTotal AS
SELECT
	round(avg(total),2) AS [Average Total]
FROM
	Invoice
  
  -- Edit View
  
 DROP VIEW "main"."V_AverageTotal";
CREATE VIEW V_AverageTotal AS
SELECT
	avg(total) AS [Average Total]
FROM
	Invoice
  
  /* 
 Joining VIEW
*/

CREATE VIEW v_InvoicelineTrack AS
SELECT
	InvoiceLine.TrackId,
	InvoiceLine.UnitPrice,
	InvoiceLine.Quantity,
	Track.Name,
	Track.Composer,
	Track.Milliseconds
FROM
	InvoiceLine 
INNER JOIN
	Track 
ON
	InvoiceLine.TrackId = Track.TrackId
  
/* 
DML | Inserting Data (Add Bob Marley into the Artist table)
*/

INSERT INTO
	Artist (Name)
VALUES ('Bob Marley')

/* 
DML | Update Data (Correct Bob Marley to Damien Marley)
*/

UPDATE 
	Artist
SET Name = 'Damien Marley'
WHERE
	ArtistId = 276
  
/* 
DML | DELETE Data (remove all together the Damien Marley)
*/

DELETE FROM
	Artist
WHERE
	ArtistId = 276
	
